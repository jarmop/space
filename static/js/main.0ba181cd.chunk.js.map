{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["sunPlanets","color","radius","distanceToSun","kepler90Planets","trappist1Planets","SYSTEM_OPTION_SUN","VIEW_OPTION_SIZE","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","system","view","setState","_this2","previousPlanetsDistanceToSun","systems","data","planetsView","map","planet","distanceToPrevious","react_default","a","createElement","App_Planet","key","showRelativeDiameter","showRelativeDistance","defaultValue","onChange","e","setSystem","parseInt","currentTarget","value","type","name","defaultChecked","setView","htmlFor","className","React","Component","Planet","_ref","diameter","style","backgroundColor","width","height","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ba181cd.chunk.js","sourcesContent":["const SUN_RADIUS = 696342;\nconst EARTH_RADIUS = 6371;\nconst EARTH_DISTANCE_TO_SUN = 149.6;\n\nexport const sunPlanets = [\n  {\n    color: 'yellow',\n    radius: 696342,\n    distanceToSun: 0,\n  },\n  {\n    color: 'lightsalmon',\n    radius: 2439.7,\n    distanceToSun: 57.91,\n  },\n  {\n    color: 'orange',\n    radius: 6051.8,\n    distanceToSun: 108.2,\n  },\n  {\n    color: 'lightblue',\n    radius: EARTH_RADIUS,\n    distanceToSun: EARTH_DISTANCE_TO_SUN,\n  },\n  {\n    color: 'orangered',\n    radius: 3389.5,\n    distanceToSun: 227.9,\n  },\n  {\n    color: 'darkorange',\n    radius: 69911,\n    distanceToSun: 778.5,\n  },\n  {\n    color: 'peru',\n    radius: 58232,\n    distanceToSun: 1426,\n  },\n  {\n    color: 'lightblue',\n    radius: 25362,\n    distanceToSun: 2871,\n  },\n  {\n    color: 'deepskyblue',\n    radius: 24622,\n    distanceToSun: 4495,\n  },\n  {\n    color: 'lightgray',\n    radius: 1188.3,\n    distanceToSun: 7500,\n  },\n];\n\nexport const kepler90Planets = [\n  {\n    color: 'yellow',\n    radius: 834840,\n    distanceToSun: 0,\n  },\n  {\n    color: 'lightsalmon',\n    radius: 8346,\n    distanceToSun: 11.07,\n  },\n  {\n    color: 'brown',\n    radius: 1.18 * EARTH_RADIUS,\n    distanceToSun: 0.089 * EARTH_DISTANCE_TO_SUN,\n  },\n  {\n    color: 'goldenrod',\n    radius: 1.32 * EARTH_RADIUS,\n    distanceToSun: 0.107 * EARTH_DISTANCE_TO_SUN,\n  },\n  {\n    color: 'lightgray',\n    radius: 2.88 * EARTH_RADIUS,\n    distanceToSun: 0.32 * EARTH_DISTANCE_TO_SUN,\n  },\n  {\n    color: 'deepskyblue',\n    radius: 2.67 * EARTH_RADIUS,\n    distanceToSun: 0.42 * EARTH_DISTANCE_TO_SUN,\n  },\n  {\n    color: 'peru',\n    radius: 2.89 * EARTH_RADIUS,\n    distanceToSun: 0.48 * EARTH_DISTANCE_TO_SUN,\n  },\n  {\n    color: 'darkorange',\n    radius: 8.13 * EARTH_RADIUS,\n    distanceToSun: 0.71 * EARTH_DISTANCE_TO_SUN,\n  },\n  {\n    color: 'orange',\n    radius: 11.32 * EARTH_RADIUS,\n    distanceToSun: 1.01 * EARTH_DISTANCE_TO_SUN,\n  },\n];\n\nexport const trappist1Planets = [\n  {\n    color: 'salmon',\n    radius: 0.121 * SUN_RADIUS,\n    distanceToSun: 0,\n  },\n  {\n    color: 'darkolivegreen',\n    radius: 1.121 * EARTH_RADIUS,\n    distanceToSun: 0.01154775 * EARTH_DISTANCE_TO_SUN,\n  },\n  {\n    color: 'bisque',\n    radius: 1.095 * EARTH_RADIUS,\n    distanceToSun: 0.01581512 * EARTH_DISTANCE_TO_SUN,\n  },\n  {\n    color: 'darkgray',\n    radius: 0.784 * EARTH_RADIUS,\n    distanceToSun: 0.02228038 * EARTH_DISTANCE_TO_SUN,\n  },\n  {\n    color: 'bisque',\n    radius: 0.910 * EARTH_RADIUS,\n    distanceToSun: 0.02928285 * EARTH_DISTANCE_TO_SUN,\n  },\n  {\n    color: 'bisque',\n    radius: 1.046 * EARTH_RADIUS,\n    distanceToSun: 0.03853361 * EARTH_DISTANCE_TO_SUN,\n  },\n  {\n    color: 'bisque',\n    radius: 1.148 * EARTH_RADIUS,\n    distanceToSun: 0.04687692 * EARTH_DISTANCE_TO_SUN,\n  },\n  {\n    color: 'sandybrown',\n    radius: 0.773 * EARTH_RADIUS,\n    distanceToSun: 0.06193488 * EARTH_DISTANCE_TO_SUN,\n  },\n];","import React from 'react';\nimport './App.css';\nimport * as data from './data';\n\nconst SYSTEM_OPTION_SUN = 1;\nconst SYSTEM_OPTION_KEPLER_90 = 2;\nconst SYSTEM_OPTION_TRAPPIST_1 = 3;\n\nconst VIEW_OPTION_SIZE = 1;\nconst VIEW_OPTION_DISTANCE = 2;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      system: SYSTEM_OPTION_SUN,\n      view: VIEW_OPTION_SIZE,\n    };\n  }\n\n  setView(view) {\n    this.setState({view: view});\n  }\n\n  setSystem(system) {\n    this.setState({system: system});\n  }\n\n  render() {\n    let previousPlanetsDistanceToSun = 0;\n    let systems = {};\n    systems[SYSTEM_OPTION_SUN] = data.sunPlanets;\n    systems[SYSTEM_OPTION_KEPLER_90] = data.kepler90Planets;\n    systems[SYSTEM_OPTION_TRAPPIST_1] = data.trappist1Planets;\n\n    let planets = systems[this.state.system];\n    let planetsView = planets.map(planet => {\n          let distanceToPrevious = planet.distanceToSun - previousPlanetsDistanceToSun;\n          previousPlanetsDistanceToSun = planet.distanceToSun;\n          return (\n              <Planet\n                  key={planet.distanceToSun}\n                  planet={planet}\n                  distanceToPrevious={distanceToPrevious}\n                  showRelativeDiameter={this.state.view === VIEW_OPTION_SIZE}\n                  showRelativeDistance={this.state.view === VIEW_OPTION_DISTANCE}\n              />\n          )\n        }\n    );\n\n    return (\n        <div>\n          <select\n              defaultValue={this.state.system}\n              onChange={e => this.setSystem(parseInt(e.currentTarget.value))}\n          >\n            <option value={SYSTEM_OPTION_SUN}>Sun</option>\n            <option value={SYSTEM_OPTION_KEPLER_90}>Kepler-90</option>\n            <option value={SYSTEM_OPTION_TRAPPIST_1}>Trappist-1</option>\n          </select>\n          <input\n              type=\"radio\"\n              name=\"view\"\n              value={VIEW_OPTION_SIZE}\n              defaultChecked={this.state.view === VIEW_OPTION_SIZE}\n              onChange={e => this.setView(parseInt(e.currentTarget.value))}\n          />\n          <label htmlFor=\"size\">size</label>\n          <input\n              type=\"radio\"\n              name=\"view\"\n              value={VIEW_OPTION_DISTANCE}\n              defaultChecked={this.state.view === VIEW_OPTION_DISTANCE}\n              onChange={e => this.setView(parseInt(e.currentTarget.value))}\n          />\n          <label htmlFor=\"distance\">distance</label>\n          <div className=\"space\">\n            {planetsView}\n          </div>\n        </div>\n    );\n  }\n}\n\nconst radiusMultiplier = .001;\nconst distanceMultiplier = 0.5;\nconst defaultDiameter = 1;\nconst defaultDistance = 30;\n\nconst Planet = ({planet, distanceToPrevious, showRelativeDiameter, showRelativeDistance}) => {\n  let diameter = showRelativeDiameter ? planet.radius * radiusMultiplier : defaultDiameter;\n  return (\n      <div className=\"planet\" style={{\n        backgroundColor: planet.color,\n        width: diameter,\n        height: diameter,\n        marginLeft: showRelativeDistance\n            ? (distanceToPrevious\n              ? distanceToPrevious * distanceMultiplier\n              : defaultDistance)\n            : defaultDistance,\n      }}></div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}