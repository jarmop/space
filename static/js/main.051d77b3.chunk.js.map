{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["planets","color","radius","distanceToSun","VIEW_OPTION_SIZE","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","viewOption","setState","_this2","console","log","previousPlanetsDistanceToSun","planetsView","map","planet","distanceToPrevious","react_default","a","createElement","App_Planet","key","showRelativeDiameter","showRelativeDistance","type","name","value","defaultChecked","onChange","e","setViewOption","parseInt","currentTarget","htmlFor","className","React","Component","Planet","_ref","diameter","style","backgroundColor","width","height","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.051d77b3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst planets = [\n  {\n    color: 'yellow',\n    radius: 696342,\n    distanceToSun: 0,\n  },\n  {\n    color: 'lightsalmon',\n    radius: 2439.7,\n    distanceToSun: 57.91, // million km\n  },\n  {\n    color: 'orange',\n    radius: 6051.8,\n    distanceToSun: 108.2,\n  },\n  {\n    color: 'lightblue',\n    radius: 6371,\n    distanceToSun: 149.6,\n  },\n  {\n    color: 'orangered',\n    radius: 3389.5,\n    distanceToSun: 227.9,\n  },\n  {\n    color: 'darkorange',\n    radius: 69911,\n    distanceToSun: 778.5,\n  },\n  {\n    color: 'peru',\n    radius: 58232,\n    distanceToSun: 1426,\n  },\n  {\n    color: 'lightblue',\n    radius: 25362,\n    distanceToSun: 2871,\n  },\n  {\n    color: 'deepskyblue',\n    radius: 24622,\n    distanceToSun: 4495,\n  },\n  {\n    color: 'lightgray',\n    radius: 1188.3,\n    distanceToSun: 7500,\n  },\n];\n\nconst VIEW_OPTION_SIZE = 1;\nconst VIEW_OPTION_DISTANCE = 2;\n// const SPACE_HEIGHT = 400;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      viewOption: VIEW_OPTION_SIZE,\n    };\n  }\n\n  setViewOption(viewOption) {\n    this.setState({viewOption: viewOption});\n  }\n\n  render() {\n    console.log('render');\n    console.log(this.state.viewOption);\n    console.log(VIEW_OPTION_SIZE);\n    console.log(VIEW_OPTION_DISTANCE);\n    console.log(this.state.viewOption === VIEW_OPTION_SIZE);\n    console.log(this.state.viewOption === VIEW_OPTION_DISTANCE);\n    let previousPlanetsDistanceToSun = 0;\n    let planetsView = planets.map(planet => {\n          let distanceToPrevious = planet.distanceToSun - previousPlanetsDistanceToSun;\n          previousPlanetsDistanceToSun = planet.distanceToSun;\n          return (\n              <Planet\n                  key={planet.distanceToSun}\n                  planet={planet}\n                  distanceToPrevious={distanceToPrevious}\n                  showRelativeDiameter={this.state.viewOption === VIEW_OPTION_SIZE}\n                  showRelativeDistance={this.state.viewOption === VIEW_OPTION_DISTANCE}\n              />\n          )\n        }\n    );\n\n    return (\n        <div>\n          <input\n              type=\"radio\"\n              name=\"view\"\n              value={VIEW_OPTION_SIZE}\n              defaultChecked={this.state.viewOption === VIEW_OPTION_SIZE}\n              onChange={e => this.setViewOption(parseInt(e.currentTarget.value))}\n          />\n          <label htmlFor=\"size\">size</label>\n          <input\n              type=\"radio\"\n              name=\"view\"\n              value={VIEW_OPTION_DISTANCE}\n              defaultChecked={this.state.viewOption === VIEW_OPTION_DISTANCE}\n              onChange={e => this.setViewOption(parseInt(e.currentTarget.value))}\n          />\n          <label htmlFor=\"distance\">distance</label>\n          <div className=\"space\">\n          {/*<div className=\"space\" style={{height: SPACE_HEIGHT}}>*/}\n            {planetsView}\n          </div>\n        </div>\n    );\n  }\n}\n\nconst radiusMultiplier = .0008;\nconst distanceMultiplier = 0.1;\nconst defaultDiameter = 1;\nconst defaultDistance = 30;\n\nconst Planet = ({planet, distanceToPrevious, showRelativeDiameter, showRelativeDistance}) => {\n  let diameter = showRelativeDiameter ? planet.radius * radiusMultiplier : defaultDiameter;\n  return (\n      <div className=\"planet\" style={{\n        backgroundColor: planet.color,\n        width: diameter,\n        height: diameter,\n        marginLeft: showRelativeDistance\n            ? (distanceToPrevious\n              ? distanceToPrevious * distanceMultiplier\n              : defaultDistance)\n            : defaultDistance,\n      }}></div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}